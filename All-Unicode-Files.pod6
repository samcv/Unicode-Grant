#!/usr/bin/env perl6
=begin pod
=head3 Key
=item NameofFile.txt I<N/A-to-Perl6>
    =item2 The name of the file as seen at URL
    =item2 Will show I<N/A-to-Perl6> if its contents are not needed as a B<data source>
    or as a B<test source>.
=item TASK: Task-name-here
    =item2 The name of the task that this data file is associated with for this
    Grant's work.

=item Perl6-TEST-STATUS: N/A
    =item2 shows status of a B<test data> document being implemented in Perl 6
=item Perl6-TEST-STATUS: InProjectRepo
    =item2 Meaning that the test is done and in this repository
=item UniProp_DATA: I<Property_Name>
    =item2 Shows what properties are included in a B<source data> document.

=head1 Contains a Directory listing and overview of Unicode Data files

=head2 List of Canonical Aliases

=item PropertyAliases.txt
    =item2 Alias names of Unicode property I<names> to other canonical property names.
    =item2 We need this because Perl 6 should accept any canonical property name alias
          Aside: can/should be case insensitive and nonsensitive to underscores
          I<graphemeclusterbreak> should be work for I<Grapheme_Cluster_Break>
    =item2 B<NOT> guaranteed to be unique and several property aliases are also
    unrelated property values

=item PropertyValueAliases.txt
    =item2 Similar to Property name aliases (see item above), except this is for
    property B<values>. They should be interchangable as well.

=item NameAliases.txt

=item ArabicShaping.txt
    =item2 Perl6-TEST-STATUS: InProjectRepo
    =item2 UniProp_DATA: C<Joining_Type> <C<Joining_Group>
    =item2 “I<This file defines the Joining_Type and Joining_Group property
    values for Arabic, Syriac, N'Ko, Mandaic, and Manichaean positional
    shaping, repeating in machine readable form the information
    exemplified in Tables 9-3, 9-8, 9-9, 9-10, 9-14, 9-15, 9-16, 9-19,
    9-20, 10-4, 10-5, 10-6, 10-7, and 19-5 of The Unicode Standard core
    specification. This file also defines Joining_Type values for
    Mongolian, Phags-pa, and Psalter Pahlavi positional shaping, which
    are not listed in tables in the standard.>”

=head2 auxiliary

=item auxiliary/
    =item2 GraphemeBreakProperty.txt
        =item3 UniProp_DATA: C<Grapheme_Cluster_Break>
        =item3 One of the most important properties. Almost exclusively defines
        how we break up codepoints into graphemes.
    =item2 GraphemeBreakTest.html
        =item3 TASK: L<GraphemeClusterBreak|GraphemeClusterBreak>
        =item3 Has a table which shows a matrix of how GCB properties interact with
        each other. L<9.0 Online|http://www.unicode.org/Public/9.0.0/ucd/auxiliary/GraphemeBreakTest.html>
    =item2 GraphemeBreakTest.txt
        =item2 Perl6-TEST-STATUS: [X] L<Merged. ROAST_TESTING|Home#roast-new-version-of-graphemebreaktestt>
        =item3 Important test for checking how Graphemes breakup
        =item4 check breaking them up arbitrarily. I.E.
        instead of just checking on the total numbers, check when you .substr them
    =item2 LineBreakTest.html
    =item2 LineBreakTest.txt
        =item3 Perl6-TEST-STATUS: N/A
        =item3 Perl 6 has access to the Sentence_Break property, but the test is
        not needed because we don't break up text by sentences in Perl 6.
    =item2 SentenceBreakProperty.txt C<Sentence_Break>
    =item2 SentenceBreakTest.html N/A-to-Perl6
    =item2 SentenceBreakTest.txt N/A-to-Perl6
        =item3 Perl6-TEST-STATUS: N/A
        =item3 Perl 6 has access to the Sentence_Break property, but the test is
        not needed because we don't break up text by sentences in Perl 6.

    =item2 WordBreakProperty.txt C<Word_Break>
    =item2 WordBreakTest.html NA
    =item2 WordBreakTest.txt NA
        =item3 Perl6-TEST-STATUS: NA

=head1 Mirroring
=item BidiMirroring.txt
    =item2 UniProp: `Bidi_Paired_Bracket` `Bidi_Mirroring_Glyph`
    =item2 Glyphs which should be mirrored and their mirrored counterparts (when switching from LTR or RTL text)
    =item2 Also includes a list of codepoints which have no mirrored pair, but should be mirrored (by flipping).

=item BidiBrackets.txt #Data
    =item2 UniProp: `Bidi_Paired_Bracket_Type`
    =item2 Subset of BidiMirroringGlyph. And only includes brackets.
    =item2 **Note** does not include matched quotation marks.

=item BidiCharacterTest.txt N/A
    =item2 *This file provides a conformance test for implementations of the Unicode Bidirectional Algorithm, specified in UAX \#9: Unicode.
    Bidirectional Algorithm, at http://www.unicode.org/reports/tr9/*
    =item2 Focuses on reordering of text from a single line

=item BidiTest.txt #N/A
    =item2 Tests conformance to Unicode BA focusing on more than a single line

=item Blocks.txt
    =item2 Data: Block
=item CaseFolding.txt
    =item2 This file is a supplement to the UnicodeData file.
        It provides a case folding mapping generated from the Unicode Character Database.
        If all characters are mapped according to the full mapping below, then
        case differences (according to UnicodeData.txt and SpecialCasing.txt)
        are eliminated.
=item CJKRadicals.txt L<TR|http://www.unicode.org/reports/tr38/>
=item CompositionExclusions.txt
=item DerivedAge.txt
=item DerivedCoreProperties.txt
=item DerivedNormalizationProps.txt
=item EastAsianWidth.txt
=item EmojiSources.txt
    =item2 Shift-JIS Encoding
    =item2 This file provides mappings between Unicode code points and sequences on one hand
        and Shift-JIS codes for cell phone carrier symbols on the other hand.

=item extracted
    =item2 DerivedBidiClass.txt
    =item2 DerivedBinaryProperties.txt
    =item2 DerivedCombiningClass.txt
    =item2 DerivedDecompositionType.txt
    =item2 DerivedEastAsianWidth.txt
    =item2 DerivedGeneralCategory.txt
    =item2 DerivedJoiningGroup.txt
    =item2 DerivedJoiningType.txt
    =item2 DerivedLineBreak.txt
    =item2 DerivedNumericType.txt
    =item2 DerivedNumericValues.txt

=item HangulSyllableType.txt
=item Index.txt
=item IndicPositionalCategory.txt
=item IndicSyllabicCategory.txt
=item Jamo.txt C<Jamo_Short_Name>

=item LineBreak.txt C<Line_Break>

=item NamedSequencesProv.txt
=item NamedSequences.txt SUPPORTED
    =item2 Names codepoint sequences which are like Name Aliases but are for multiple
    codepoints.
=item NamesList.html
=item NamesList.txt
=item NormalizationCorrections.txt
=item NormalizationTest.txt
=item PropList.txt
    =item2 Uniprop_DATA: C<White_Space> C<Bidi_Control> C<Join_Control> C<Dash>
    C<Hyphen> C<Quotation_Mark> C<Terminal_Punctuation> C<Other_Math>
    C<Hex_Digit> C<ASCII_Hex_Digit> C<Other_Alphabetic> C<Ideographic>
    C<Diacritic> C<Extender> C<Other_Lowercase> C<Other_Uppercase>
    C<Noncharacter_Code_Point> C<Other_Grapheme_Extend> C<IDS_Binary_Operator>
    C<IDS_Trinary_Operator> C<Radical> C<Unified_Ideograph>
    C<Other_Default_Ignorable_Code_Point> C<Deprecated> C<Soft_Dotted>
    C<Logical_Order_Exception> C<Other_ID_Start> C<Other_ID_Continue>

=item ReadMe.txt
=item ScriptExtensions.txt C<Script_Extensions> L<TR|http://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values>
    =item2 B<Status>: Unsupported
    =item2 Values are an unordered set for codepoints that have this property.
    Can be one or more of the many Scripts. As of Unicode 9.0 the number of items
    in the set from 1-17 different scripts. Most have 1 or 2 scripts (mode).
=item Scripts.txt UniProp_DATA: C<Script> L<TR|http://www.unicode.org/reports/tr24/>
    =item2 The C<Script> of the codepoint. This can only have one value unlike
    the C<scx> property.
=item SpecialCasing.txt
=item StandardizedVariants.html
=item StandardizedVariants.txt
=item TangutSources.txt
=item UCD.zip
=item UnicodeData.txt
=item Unihan.zip
=item USourceData.txt N/A-to-Perl6
    =item2 Data on submitted CJK ideographs submitted to the Unicode organization
    =item2 N/A-to-Perl6, this is distributed to allow greater distribution of
         proposed additions to the CJK ideograph extensions

=item USourceGlyphs.pdf N/A-to-Perl6
    =item2 See item above, this just contains pictures of the proposed CJK Ideographs

=end pod
use Terminal::ANSIColor;
sub traverse-pod ($thepod, $depth?, $type?) {
    given $thepod {
        when Array {
            for $thepod.list -> $a {
                traverse-pod($a, $depth, $type);
            }
        }
        #when FormattingCode
        when Pod::Block {
            if .isa(Pod::Block::Named) {
                my $n = $thepod.name;
                if $n eq 'done' {
                    print '- [X] ';
                }
                elsif $n eq 'todo' {
                    print '- [ ] ';
                }
                #   die $n;
            }
            my ($d, $t);
            try { $d = .level }
            try { $t = .type  }
            $d //= $depth;
            $t //= $type;
            traverse-pod .contents, $d, $t;
        }
        when Str {
            my $str = $depth.defined ?? " " x ($depth×2) !! "";
            $str ~= $_;
            if $type {
                my @styles;
                @styles.push('italic') if $type.contains('I');
                @styles.push('bold') if $type.contains('B');
                @styles.push('underline') if $type.contains('U');
                $str = colored($str, @styles.join(' ') );
            }
            $str.say;
        }
        default { die "oh no: ", .WHAT.VAR.gist };
    }

}
say $=pod;

#exit;
#traverse-pod($=pod);
